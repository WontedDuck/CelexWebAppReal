@model List<CelexWebApp.Models.ProfesorMMV.ProfesorModel>

@{
    ViewData["Title"] = "Historial de Maestros";
}

<link href="~/css/grupo_deta/buscar_profesor.css" rel="stylesheet" />
<!-- Fondo animado con partículas y efectos geométricos -->
<canvas id="particleCanvas" style="position: fixed; top: 0; left: 0; z-index: -2; width: 100%; height: 100%;"></canvas>
<canvas id="geometricCanvas" style="position: fixed; top: 0; left: 0; z-index: -1; width: 100%; height: 100%;"></canvas>

<h2>Historial de Maestros</h2>
<div class="form-group" style="max-width: 350px; margin-bottom: 15px;">
    <input type="text" id="buscadorProfesores" class="form-control" placeholder="Buscar profesor..." onkeyup="filtrarProfesores()" />
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Número de Empleado</th>
            <th>Teléfono</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var profesor in Model)
        {
            <tr class="profesor-row">
                <td>@profesor.Id</td>
                <td>@profesor.Nombre</td>
                <td>@profesor.Numero_Empleado</td>
                <td>@profesor.Telefono</td>
                <td>
                    <form asp-action="HistorialProfesor" asp-controller="Administrador" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@profesor.Id" />
                        <input type="hidden" name="nombre" value="@profesor.Nombre" />
                        <button type="submit" class="btn btn-primary btn-sm">Ver Historial</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pie de página -->
<footer class="footer">
    <p>© @DateTime.Now.Year - CelexWebApp</p>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Inicialización de partículas
    const particleCanvas = document.getElementById("particleCanvas");
    const particleCtx = particleCanvas.getContext("2d");

    if (particleCanvas && particleCtx) {
        console.log("Inicializando partículas...");
        particleCanvas.width = window.innerWidth;
        particleCanvas.height = window.innerHeight;

        window.addEventListener("resize", () => {
            particleCanvas.width = window.innerWidth;
            particleCanvas.height = window.innerHeight;
        });

        const particlesArray = [];
        const numberOfParticles = 150;

        class Particle {
            constructor() {
                this.x = Math.random() * particleCanvas.width;
                this.y = Math.random() * particleCanvas.height;
                this.size = Math.random() * 3 + 1;
                this.speedX = Math.random() * 0.7 - 0.35;
                this.speedY = Math.random() * 0.7 - 0.35;
                this.opacity = Math.random() * 0.7 + 0.2;
            }
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.x > particleCanvas.width) this.x = 0;
                if (this.x < 0) this.x = particleCanvas.width;
                if (this.y > particleCanvas.height) this.y = 0;
                if (this.y < 0) this.y = particleCanvas.height;
            }
            draw() {
                particleCtx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
                particleCtx.beginPath();
                particleCtx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                particleCtx.fill();
            }
        }

        function initParticles() {
            console.log("Creando partículas...");
            for (let i = 0; i < numberOfParticles; i++) {
                particlesArray.push(new Particle());
            }
        }

        function animateParticles() {
            particleCtx.clearRect(0, 0, particleCanvas.width, particleCanvas.height);
            for (let i = 0; i < particlesArray.length; i++) {
                particlesArray[i].update();
                particlesArray[i].draw();
            }
            requestAnimationFrame(animateParticles);
        }

        initParticles();
        animateParticles();
    } else {
        console.error("No se pudo inicializar el canvas de partículas.");
    }

    // Inicialización de efectos geométricos
    const geometricCanvas = document.getElementById("geometricCanvas");
    const geometricCtx = geometricCanvas.getContext("2d");

    if (geometricCanvas && geometricCtx) {
        console.log("Inicializando efectos geométricos...");
        geometricCanvas.width = window.innerWidth;
        geometricCanvas.height = window.innerHeight;

        window.addEventListener("resize", () => {
            geometricCanvas.width = window.innerWidth;
            geometricCanvas.height = window.innerHeight;
        });

        function drawGeometricPattern() {
            geometricCtx.clearRect(0, 0, geometricCanvas.width, geometricCanvas.height);
            geometricCtx.strokeStyle = `rgba(255, 255, 255, 0.05)`;
            geometricCtx.lineWidth = 0.5;

            for (let i = 0; i < 10; i++) {
                geometricCtx.beginPath();
                geometricCtx.moveTo(Math.random() * geometricCanvas.width, 0);
                geometricCtx.lineTo(Math.random() * geometricCanvas.width, geometricCanvas.height);
                geometricCtx.stroke();
            }
            requestAnimationFrame(drawGeometricPattern);
        }

        drawGeometricPattern();
    } else {
        console.error("No se pudo inicializar el canvas de efectos geométricos.");
    }

    // Animaciones de entrada escalonadas
    const sections = document.querySelectorAll(".glass-panel, .glass-section");

    sections.forEach((section, index) => {
        setTimeout(() => {
            section.style.transition = "opacity 1.5s ease-out, transform 1.5s ease-out";
            section.style.opacity = "1";
            section.style.transform = "translateY(0)";
        }, 300 + index * 200);
    });

    // Función para marcar una notificación como leída
    function marcarLeida(button) {
        const li = button.closest('.notification-item');
        li.style.textDecoration = "line-through"; // Marca la notificación como leída visualmente
        button.disabled = true; // Desactiva el botón de "Marcar como Leída"
    }
        function filtrarProfesores() {
        var input = document.getElementById("buscadorProfesores");
        var filtro = input.value.toLowerCase();
        var filas = document.querySelectorAll(".profesor-row");

        filas.forEach(function(fila) {
            var id = fila.children[0].textContent.toLowerCase();
            var nombre = fila.children[1].textContent.toLowerCase();
            var numEmpleado = fila.children[2].textContent.toLowerCase();
            var telefono = fila.children[3].textContent.toLowerCase();
            if (
                id.includes(filtro) ||
                nombre.includes(filtro) ||
                numEmpleado.includes(filtro) ||
                telefono.includes(filtro)
            ) {
                fila.style.display = "";
            } else {
                fila.style.display = "none";
            }
        });
    }

</script>

