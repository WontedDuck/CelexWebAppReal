@model CelexWebApp.Models.AdministradorMMV.GrupoDetallesModel

@{
    ViewData["Title"] = "Detalles del Grupo";
}
<link href="~/css/grupo_deta/inde.css" rel="stylesheet" />
<!-- Contenedor principal -->
<div class="admin-wrapper">
    <div class="row-container">
        <div class="glass-panel" style="opacity: 0; transform: translateY(50px);">
            <h1>Detalles del Grupo</h1>
            
            <!-- Sección: Información del Grupo -->
            <div class="glass-section" style="margin-bottom: 25px;">
                <h2>Información del Grupo</h2>
                @if (TempData["informacion"] != null && TempData["informacion"].ToString() != "Grupo Vacio")
                {
                    <div class="alert alert-info glass-alert" style="margin-bottom: 15px;">@TempData["informacion"]</div>
                }
                @{
                    var idRol = Context.Session.GetString("id_rol");
                }
                <!-- FORMULARIO: Modificar Información -->
                <form asp-action="GuardarGrupo" asp-controller="GrupoDetalles" method="post" style="margin-bottom: 20px;">
                    <input type="hidden" name="IdGrupo" value="@Model.Id" />

                    <div class="glass-card">
                        <div class="card-body">
                            @if (TempData["mensaje"] != null)
                            {
                                <div class="alert alert-info glass-alert" style="margin-bottom: 15px;">@TempData["mensaje"]</div>
                            }
                            @if (TempData["error"] != null)
                            {
                                <div class="alert alert-danger glass-alert" style="margin-bottom: 15px;">@TempData["error"]</div>
                            }
                            <div class="row">
                                <div class="col-md-6 col-12" style="margin-bottom: 15px;">
                                    <div class="form-group">
                                        <label class="form-label"><strong>Nombre del Grupo:</strong></label>
                                        <input type="text" name="Nombre" class="form-control" value="@Model.Nombre" required />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label"><strong>Nivel:</strong></label>
                                        @{
                                            var niveles = new List<string> {
                                        "Introductorio", "Basico1", "Basico2", "Basico3", "Basico4", "Basico5",
                                        "Intermedio1", "Intermedio2", "Intermedio3", "Intermedio4", "Intermedio5",
                                        "Avanzado1", "Avanzado2", "Avanzado3", "Avanzado4", "Avanzado5", "FCE"
                                        };
                                        }
                                        <select name="Nivel" class="form-control" required>
                                            @foreach (var nivel in niveles)
                                            {
                                                <option value="@nivel" selected="@(Model.Nivel == nivel ? "selected" : null)">@nivel</option>
                                            }
                                        </select>

                                    </div>
                                    <div class="form-group">
                                        <label class="form-label"><strong>Tipo de Curso:</strong></label>
                                        @{
                                            var tiposCurso = new List<string> { "Semanal", "Sabatino", "Intensivo" };
                                        }
                                        <select name="TipoCurso" class="form-control" required>
                                            @foreach (var tipo in tiposCurso)
                                            {
                                                <option value="@tipo" selected="@(Model.TipoCurso == tipo ? "selected" : null)">@tipo</option>
                                            }
                                        </select>

                                    </div>
                                    <div class="form-group">
                                        <label class="form-label"><strong>Capacidad:</strong></label>
                                        <input type="number" name="Capacidad" class="form-control" value="@Model.Capacidad" min="1" max="50" required />
                                    </div>
                                </div>
                                <div class="col-md-6 col-12" style="margin-bottom: 15px;">
                                    <div class="form-group">
                                        <label class="form-label"><strong>Fecha de Inicio:</strong></label>
                                        <input type="date" name="FechaInicio" class="form-control" value="@Model.FechaInicio.ToString("yyyy-MM-dd")" required />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label"><strong>Fecha de Fin:</strong></label>
                                        <input type="date" name="FechaFin" class="form-control" value="@Model.FechaFin.ToString("yyyy-MM-dd")" required />
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label"><strong>Ocupados:</strong></label>
                                        <input type="number" id="OcupadosDisplay" class="form-control" value="@Model.Ocupados" min="0" readonly/>
                                        <input type="hidden" name="Ocupados" id="Ocupados" value="@Model.Ocupados" />
                                    </div>
                                </div>
                            </div>
                            @if (idRol == "3")
                            {
                                <div class="button-group" style="margin-top: 15px; justify-content: center; gap: 10px;">
                                    <button type="submit" name="accion" value="modificar" class="btn btn-primary" onclick="return confirm('¿Estás seguro de modificar el curso?');">
                                        Modificar Información
                                    </button>
                                    <button type="submit" name="accion" value="terminar" class="btn btn-success" onclick="return confirm('¿Estás seguro de terminar el ciclo?');">
                                        Terminar Ciclo
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </form>

                <!-- FORMULARIO: Borrar Grupo -->
                @if (idRol == "3")
                {
                    <form asp-action="BorrarGrupo" asp-controller="GrupoDetalles" method="post" style="margin-top: 15px;">
                        <input type="hidden" name="IdGrupo" value="@Model.Id" />
                        <button type="submit" class="btn btn-danger w-100" onclick="return confirm('¿Estás seguro de borrar el grupo?');">Borrar Grupo</button>
                    </form>
                }
            </div>

            <!-- Sección: Profesor -->
            <div class="glass-section" style="margin-bottom: 25px;">
                <h2>Profesor</h2>
                <div style="margin-top: 10px;">
                    @if (!string.IsNullOrEmpty(Model.Profesor))
                    {
                        <p>@Model.Profesor</p>
                    }
                    else if (TempData["informacion"]?.ToString() == "Grupo Vacio")
                    {
                        <a class="btn btn-warning" asp-controller="GrupoDetalles" asp-action="BuscarProfesor">Agregar Profesor</a>
                    }
                    else
                    {
                        <p>No hay profesor asignado.</p>
                    }
                </div>
            </div>

            <!-- Sección: Alumnos -->
            <div class="glass-section">
                <h2>Alumnos</h2>
                @if (TempData["informacion"]?.ToString() == "Grupo Vacio")
                {
                    <div style="margin-top: 10px;">
                        <a class="btn btn-success" asp-controller="GrupoDetalles" asp-action="BuscarAlumnos">Agregar Alumno</a>
                    </div>
                }
                else
                {
                    <div class="table-container" style="margin-top: 15px;">
                        <table class="table glass-table">
                            <thead>
                                <tr>
                                    <th>Nombre Completo</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var alumno in Model.Alumnos)
                                {
                                    <tr class="glass-row">
                                        <td>@alumno.alumno.Nombre @alumno.alumno.ApellidoPa @alumno.alumno.ApellidoMa</td>
                                        <td>
                                            <div class="action-buttons" style="display: flex; gap: 5px; flex-wrap: wrap;">
                                                @if (idRol == "3")
                                                {
                                                    <a class="btn btn-danger btn-sm"
                                                       asp-controller="GrupoDetalles"
                                                       asp-action="BajaAlumno"
                                                       asp-route-id="@alumno.alumno.Id"
                                                       onclick="return confirm('¿Estás seguro de dar de baja al alumno? Esta acción no es reversible.');">
                                                        Dar de Baja
                                                    </a>
                                                }

                                                @if (idRol == "2")
                                                {
                                                    <a class="btn btn-success btn-sm"
                                                       asp-controller="GrupoDetalles"
                                                       asp-action="Calificaciones"
                                                       asp-route-id="@alumno.alumno.Id">
                                                        Ver Calificaciones
                                                    </a>
                                                    <span class="badge bg-primary rounded-pill">Asistencia: @(alumno.alumno.Asistencia)</span>
                                                    <form method="post" class="d-inline"
                                                          asp-controller="GrupoDetalles"
                                                          asp-action="AgregarAsistencia"
                                                          asp-route-id="@alumno.alumno.Id">
                                                        <button type="submit" class="btn btn-primary btn-sm">+</button>
                                                    </form>
                                                    <form method="post" class="d-inline"
                                                          asp-controller="GrupoDetalles"
                                                          asp-action="QuitarAsistencia"
                                                          asp-route-id="@alumno.alumno.Id">
                                                        <button type="submit" class="btn btn-secondary btn-sm @((alumno.alumno.Asistencia) <= 0 ? "disabled" : "")">-</button>
                                                    </form>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    @if (Model.Ocupados < Model.Capacidad)
                    {
                        <div style="margin-top: 15px;">
                            @if (idRol == "3")
                            {
                                <a class="btn btn-success" asp-controller="GrupoDetalles" asp-action="BuscarAlumnos">Agregar Alumno</a>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    input:required:invalid {
    box-shadow: none;
    border-color: inherit;
    background-color: inherit;
    }
</div>


<!-- Pie de página -->
<footer class="footer">
    <p>© @DateTime.Now.Year - CelexWebApp</p>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
        document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector('form[asp-action="GuardarGrupo"]');
        if (!form) return;

        form.addEventListener("submit", function (e) {
            const fechaInicioInput = form.querySelector('input[name="FechaInicio"]');
            const fechaFinInput = form.querySelector('input[name="FechaFin"]');

            const fechaInicio = fechaInicioInput.value;
            const fechaFin = fechaFinInput.value;

            if (!fechaInicio || !fechaFin) {
                e.preventDefault();
                alert("Por favor, selecciona ambas fechas.");
                return;
            }

            const hoy = new Date();
            hoy.setHours(0, 0, 0, 0);
            const inicio = new Date(fechaInicio);
            const fin = new Date(fechaFin);

            // Fecha de inicio no menor a hoy
            if (inicio < hoy) {
                e.preventDefault();
                alert("La fecha de inicio no puede ser menor a hoy.");
                fechaInicioInput.focus();
                return;
            }

            // Fecha de fin no menor a inicio
            if (fin < inicio) {
                e.preventDefault();
                alert("La fecha de fin no puede ser menor a la fecha de inicio.");
                fechaFinInput.focus();
                return;
            }

            // Fecha de fin no mayor a inicio + 2 meses
            const maxFin = new Date(inicio);
            maxFin.setMonth(maxFin.getMonth() + 2);
            if (fin > maxFin) {
                e.preventDefault();
                alert("La fecha de fin no puede ser mayor a dos meses después de la fecha de inicio.");
                fechaFinInput.focus();
                return;
            }
        });
    });

    // Inicialización de partículas
    const particleCanvas = document.getElementById("particleCanvas");
    const particleCtx = particleCanvas.getContext("2d");

    if (particleCanvas && particleCtx) {
        console.log("Inicializando partículas...");
        particleCanvas.width = window.innerWidth;
        particleCanvas.height = window.innerHeight;

        window.addEventListener("resize", () => {
            particleCanvas.width = window.innerWidth;
            particleCanvas.height = window.innerHeight;
        });

        const particlesArray = [];
        const numberOfParticles = 150;

        class Particle {
            constructor() {
                this.x = Math.random() * particleCanvas.width;
                this.y = Math.random() * particleCanvas.height;
                this.size = Math.random() * 3 + 1;
                this.speedX = Math.random() * 0.7 - 0.35;
                this.speedY = Math.random() * 0.7 - 0.35;
                this.opacity = Math.random() * 0.7 + 0.2;
            }
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.x > particleCanvas.width) this.x = 0;
                if (this.x < 0) this.x = particleCanvas.width;
                if (this.y > particleCanvas.height) this.y = 0;
                if (this.y < 0) this.y = particleCanvas.height;
            }
            draw() {
                particleCtx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
                particleCtx.beginPath();
                particleCtx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                particleCtx.fill();
            }
        }

        function initParticles() {
            console.log("Creando partículas...");
            for (let i = 0; i < numberOfParticles; i++) {
                particlesArray.push(new Particle());
            }
        }

        function animateParticles() {
            particleCtx.clearRect(0, 0, particleCanvas.width, particleCanvas.height);
            for (let i = 0; i < particlesArray.length; i++) {
                particlesArray[i].update();
                particlesArray[i].draw();
            }
            requestAnimationFrame(animateParticles);
        }

        initParticles();
        animateParticles();
    } else {
        console.error("No se pudo inicializar el canvas de partículas.");
    }

    // Inicialización de efectos geométricos
    const geometricCanvas = document.getElementById("geometricCanvas");
    const geometricCtx = geometricCanvas.getContext("2d");

    if (geometricCanvas && geometricCtx) {
        console.log("Inicializando efectos geométricos...");
        geometricCanvas.width = window.innerWidth;
        geometricCanvas.height = window.innerHeight;

        window.addEventListener("resize", () => {
            geometricCanvas.width = window.innerWidth;
            geometricCanvas.height = window.innerHeight;
        });

        function drawGeometricPattern() {
            geometricCtx.clearRect(0, 0, geometricCanvas.width, geometricCanvas.height);
            geometricCtx.strokeStyle = `rgba(255, 255, 255, 0.05)`;
            geometricCtx.lineWidth = 0.5;

            for (let i = 0; i < 10; i++) {
                geometricCtx.beginPath();
                geometricCtx.moveTo(Math.random() * geometricCanvas.width, 0);
                geometricCtx.lineTo(Math.random() * geometricCanvas.width, geometricCanvas.height);
                geometricCtx.stroke();
            }
            requestAnimationFrame(drawGeometricPattern);
        }

        drawGeometricPattern();
    } else {
        console.error("No se pudo inicializar el canvas de efectos geométricos.");
    }

    // Animaciones de entrada escalonadas
    const sections = document.querySelectorAll(".glass-panel, .glass-section");

    sections.forEach((section, index) => {
        setTimeout(() => {
            section.style.transition = "opacity 1.5s ease-out, transform 1.5s ease-out";
            section.style.opacity = "1";
            section.style.transform = "translateY(0)";
        }, 300 + index * 200);
    });
</script>
