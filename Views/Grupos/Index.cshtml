@model List<CelexWebApp.Models.AdministradorMMV.GrupoModel>

@{
    ViewData["Title"] = "Grupos Creados";
}
<link href="~/css/grupos.css" rel="stylesheet" />
<!-- Fondo animado con partículas y efectos geométricos -->
<canvas id="particleCanvas" style="position: fixed; top: 0; left: 0; z-index: -2; width: 100%; height: 100%;"></canvas>
<canvas id="geometricCanvas" style="position: fixed; top: 0; left: 0; z-index: -1; width: 100%; height: 100%;"></canvas>
<!-- Contenedor principal -->
<div class="admin-wrapper">
    <div class="row-container">
        <div class="glass-panel" style="opacity: 0; transform: translateY(50px);">
            <h1>Grupos Creados</h1>
            <div class="form-group" style="max-width: 350px; margin-bottom: 15px;">
                <input type="text" id="buscadorGrupos" class="form-control" placeholder="Buscar grupo..." onkeyup="filtrarGrupos()" />
            </div>

            <!-- Sección: Lista de Grupos -->
            <div class="glass-section">
                <div class="group-list">
                    @foreach (var grupo in Model)
                    {
                        <div class="group-card glass-row" style="margin-bottom: 15px; opacity: 0; transform: translateY(30px);">
                            <div class="group-item"><strong>Nombre:</strong> @grupo.Nombre</div>
                            <div class="group-item"><strong>Nivel:</strong> @grupo.Nivel</div>
                            <div class="group-item"><strong>Tipo de Curso:</strong> @grupo.TipoCurso</div>
                            <div class="group-item"><strong>Fecha de Inicio:</strong> @grupo.FechaInicio.ToString("dd/MM/yyyy")</div>
                            <div class="group-item"><strong>Fecha de Fin:</strong> @grupo.FechaFin.ToString("dd/MM/yyyy")</div>
                            <div class="group-item"><strong>Cupos:</strong> @grupo.capacidad</div>
                            <div class="group-item action-buttons" style="display: flex; justify-content: center; margin-top: 10px;">
                                <a class="btn btn-primary btn-sm" asp-controller="GrupoDetalles" asp-action="Index" asp-route-id="@grupo.Id">Ver Detalles</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Pie de página -->
<footer class="footer">
    <p>© @DateTime.Now.Year - CelexWebApp</p>
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Inicialización de partículas
    const particleCanvas = document.getElementById("particleCanvas");
    const particleCtx = particleCanvas.getContext("2d");

    if (particleCanvas && particleCtx) {
        console.log("Inicializando partículas...");
        particleCanvas.width = window.innerWidth;
        particleCanvas.height = window.innerHeight;

        window.addEventListener("resize", () => {
            particleCanvas.width = window.innerWidth;
            particleCanvas.height = window.innerHeight;
        });

        const particlesArray = [];
        const numberOfParticles = 150;

        class Particle {
            constructor() {
                this.x = Math.random() * particleCanvas.width;
                this.y = Math.random() * particleCanvas.height;
                this.size = Math.random() * 3 + 1;
                this.speedX = Math.random() * 0.7 - 0.35;
                this.speedY = Math.random() * 0.7 - 0.35;
                this.opacity = Math.random() * 0.7 + 0.2;
            }
            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.x > particleCanvas.width) this.x = 0;
                if (this.x < 0) this.x = particleCanvas.width;
                if (this.y > particleCanvas.height) this.y = 0;
                if (this.y < 0) this.y = particleCanvas.height;
            }
            draw() {
                particleCtx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
                particleCtx.beginPath();
                particleCtx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                particleCtx.fill();
            }
        }

        function initParticles() {
            console.log("Creando partículas...");
            for (let i = 0; i < numberOfParticles; i++) {
                particlesArray.push(new Particle());
            }
        }

        function animateParticles() {
            particleCtx.clearRect(0, 0, particleCanvas.width, particleCanvas.height);
            for (let i = 0; i < particlesArray.length; i++) {
                particlesArray[i].update();
                particlesArray[i].draw();
            }
            requestAnimationFrame(animateParticles);
        }

        initParticles();
        animateParticles();
    } else {
        console.error("No se pudo inicializar el canvas de partículas.");
    }

    // Inicialización de efectos geométricos
    const geometricCanvas = document.getElementById("geometricCanvas");
    const geometricCtx = geometricCanvas.getContext("2d");

    if (geometricCanvas && geometricCtx) {
        console.log("Inicializando efectos geométricos...");
        geometricCanvas.width = window.innerWidth;
        geometricCanvas.height = window.innerHeight;

        window.addEventListener("resize", () => {
            geometricCanvas.width = window.innerWidth;
            geometricCanvas.height = window.innerHeight;
        });

        function drawGeometricPattern() {
            geometricCtx.clearRect(0, 0, geometricCanvas.width, geometricCanvas.height);
            geometricCtx.strokeStyle = `rgba(255, 255, 255, 0.05)`;
            geometricCtx.lineWidth = 0.5;

            for (let i = 0; i < 10; i++) {
                geometricCtx.beginPath();
                geometricCtx.moveTo(Math.random() * geometricCanvas.width, 0);
                geometricCtx.lineTo(Math.random() * geometricCanvas.width, geometricCanvas.height);
                geometricCtx.stroke();
            }
            requestAnimationFrame(drawGeometricPattern);
        }

        drawGeometricPattern();
    } else {
        console.error("No se pudo inicializar el canvas de efectos geométricos.");
    }

    // Animaciones de entrada escalonadas
    const sections = document.querySelectorAll(".glass-panel, .glass-section");
    const cards = document.querySelectorAll(".group-card");

    sections.forEach((section, index) => {
        setTimeout(() => {
            section.style.transition = "opacity 1.5s ease-out, transform 1.5s ease-out";
            section.style.opacity = "1";
            section.style.transform = "translateY(0)";
        }, 300 + index * 200);
    });

    cards.forEach((card, index) => {
        setTimeout(() => {
            card.style.transition = "opacity 1.5s ease-out, transform 1.5s ease-out";
            card.style.opacity = "1";
            card.style.transform = "translateY(0)";
        }, 500 + index * 150);
    });
        function filtrarGrupos() {
        var input = document.getElementById("buscadorGrupos");
        var filtro = input.value.toLowerCase();
        var cards = document.querySelectorAll(".group-card");

        cards.forEach(function(card) {
            var texto = card.textContent.toLowerCase();
            if (texto.includes(filtro)) {
                card.style.display = "";
            } else {
                card.style.display = "none";
            }
        });
    }

</script>
