@{
    ViewData["Title"] = "Comparación de Datos";
    var avanceJson = ViewData["AvanceJson"] as string;
}
<link href="~/css/registro_grup/grafica.css" rel="stylesheet" />

<style>
    #particleCanvas, #geometricCanvas {
        position: fixed;
        top: 0;
        left: 0;
        z-index: -2;
        width: 100vw;
        height: 100vh;
        pointer-events: none;
    }

    #geometricCanvas {
        z-index: -1;
    }

    .grafica-wrapper {
        width: 100%;
        max-width: 600px;
        margin: 40px auto 0 auto;
        background: var(--glass-bg, rgba(255,255,255,0.1));
        border-radius: 15px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.2);
        padding: 30px 20px;
        text-align: center;
    }

    .grafica-container {
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
        background: transparent;
    }

        .grafica-container canvas {
            display: block;
            width: 100% !important;
            height: 300px !important;
            margin: 0 auto;
            background: #fff;
            border-radius: 10px;
        }
</style>

<canvas id="particleCanvas"></canvas>
<canvas id="geometricCanvas"></canvas>

<div class="grafica-wrapper">
    <h2 id="tituloGrafica">Comparación</h2>

    <div style="margin-bottom: 20px;">
        <label for="campo1">Comparar:</label>
        <select id="campo1" class="form-control" style="display:inline-block; width:auto;">
            <option value="TipoCurso">Tipo de Curso</option>
            <option value="Nivel">Nivel</option>
            <option value="GrupoNombre">Grupo</option>
            <option value="MaestroNombre">Maestro</option>
            <option value="FechaCreacion">Fecha</option>
        </select>
        <label for="campo2" style="margin-left:10px;">Con:</label>
        <select id="campo2" class="form-control" style="display:inline-block; width:auto;">
            <option value="Nivel">Nivel</option>
            <option value="TipoCurso">Tipo de Curso</option>
            <option value="GrupoNombre">Grupo</option>
            <option value="MaestroNombre">Maestro</option>
            <option value="FechaCreacion">Fecha</option>
        </select>
    </div>

    <div class="grafica-container">
        <canvas id="graficaCalificaciones"></canvas>
    </div>

    <div style="text-align:center; margin-top:20px;">
        <a asp-controller="RegistroGrupos" asp-action="Index" class="btn btn-secondary mt-4">Volver</a>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const avanceData = @Html.Raw(avanceJson);
        let chart;

        const ctx = document.getElementById('graficaCalificaciones').getContext('2d');

        document.getElementById("campo1").addEventListener("change", generarGrafica);
        document.getElementById("campo2").addEventListener("change", generarGrafica);

        function generarGrafica() {
            const campo1 = document.getElementById("campo1").value;
            const campo2 = document.getElementById("campo2").value;

            const agrupados = {};

            avanceData.forEach(item => {
                let valor1 = item[campo1];
                let valor2 = item[campo2];

                if (campo1 === "FechaCreacion") valor1 = new Date(valor1).toLocaleDateString('es-MX');
                if (campo2 === "FechaCreacion") valor2 = new Date(valor2).toLocaleDateString('es-MX');

                const clave = `${valor1} - ${valor2}`;
                if (!agrupados[clave]) agrupados[clave] = 0;
                agrupados[clave]++;
            });

            const etiquetas = Object.keys(agrupados);
            const valores = Object.values(agrupados);

            if (chart) chart.destroy();

            chart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: etiquetas,
                    datasets: [{
                        label: 'Cantidad',
                        data: valores,
                        backgroundColor: 'rgba(30, 144, 255, 0.6)',
                        borderColor: 'rgba(30, 144, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: { beginAtZero: true }
                    },
                    plugins: {
                        legend: { labels: { color: '#FFFFFF' } },
                        title: { display: true, text: `Comparación: ${campo1} con ${campo2}`, color: '#FFFFFF' }
                    }
                }
            });
            document.getElementById("tituloGrafica").innerText = `Comparación: ${campo1} con ${campo2}`;
        }
        generarGrafica();
    </script>
    <script>
        // Animación de desplazamiento para partículas
        const particleCanvas = document.getElementById("particleCanvas");
        const particleCtx = particleCanvas.getContext("2d");

        if (particleCanvas && particleCtx) {
            particleCanvas.width = window.innerWidth;
            particleCanvas.height = window.innerHeight;

            window.addEventListener("resize", () => {
                particleCanvas.width = window.innerWidth;
                particleCanvas.height = window.innerHeight;
            });

            const particlesArray = [];
            const numberOfParticles = 150;

            class Particle {
                constructor() {
                    this.x = Math.random() * particleCanvas.width;
                    this.y = Math.random() * particleCanvas.height;
                    this.size = Math.random() * 3 + 1;
                    this.speedX = Math.random() * 0.7 - 0.35;
                    this.speedY = Math.random() * 0.7 - 0.35;
                    this.opacity = Math.random() * 0.7 + 0.2;
                }
                update() {
                    this.x += this.speedX;
                    this.y += this.speedY;
                    if (this.x > particleCanvas.width) this.x = 0;
                    if (this.x < 0) this.x = particleCanvas.width;
                    if (this.y > particleCanvas.height) this.y = 0;
                    if (this.y < 0) this.y = particleCanvas.height;
                }
                draw() {
                    particleCtx.fillStyle = `rgba(255, 255, 255, ${this.opacity})`;
                    particleCtx.beginPath();
                    particleCtx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                    particleCtx.fill();
                }
            }

            function initParticles() {
                for (let i = 0; i < numberOfParticles; i++) {
                    particlesArray.push(new Particle());
                }
            }

            function animateParticles() {
                particleCtx.clearRect(0, 0, particleCanvas.width, particleCanvas.height);
                for (let i = 0; i < particlesArray.length; i++) {
                    particlesArray[i].update();
                    particlesArray[i].draw();
                }
                requestAnimationFrame(animateParticles);
            }

            initParticles();
            animateParticles();
        }
    </script>
}